# Example configuration for mq2db.

# Target services list.
# Each entry also corresponds to the name of database table and the MQ endpoint.
targets:
  # Example service.
  example:
    # Type of the message queue.
    type: sub
    # Method for connecting to the message queue.
    method: connect
    # MQ endpoint setting.
    address: tcp://127.0.0.1:12345
    # For SUB socket, topic to subscribe.
    topic: ""
    # Receive method for socket.
    recv:
      # For ZeroMQ:
      # recv, recv_multipart, recv_pyobj, recv_serialized, recv_json, recv_string, recv_unicode, ...
      method: recv_pyobj
    # Data loader from bytes received from MQ socket.
    # loader is used as follows to generate a dict representation of received bytes:
    #
    #     recv_method = getattr(sock, <recv.method>)  # `sock` is the MQ socket.
    #     loader = mq2db.JSONLoader(*args, **kwargs)  # Depending on the setting below.
    #     data = loader(recv_method())
    #
    # Default loaders are:
    # - mq2db.DictLoader
    #   Builtin loader for Python dict object.
    #   If no loader is specified, this is used by default.
    # - mq2db.JSONLoader
    #   Builtin loader for JSON.
    # - mq2db.TextLoader
    #   Builtin loader for UTF-8 encoded text.
    # - mq2db.CSVLoader
    #   Builtin loader for CSV (comma-separated values).
    # - your_package.your_module.YourLoader
    #   Custom loader can be used if it can be resolved via ordinary import system.
    #   In this case, a class named `YourLoader` under a module `your_module`,
    #   under a package `your_package`, is imported.
    #
    # args and kwargs are passed to the class's initializer.
    loader:
      class: your_package.your_module.YourLoader
      args:
        - arg1
        - arg2
      kwargs:
        someparameter: 1
        anotherparameter: hoge
        verbose: True
    # Database settings.
    database:
      # Database URL which is passed to sqlalchemy.
      # Note for the case when the driver is `sqlite`:
      # - '~' is expanded to user's home folder.
      # - If url contains datetime format like %Y%m%d,
      #   it is first formatted by `datetime.now(timezone.utc).strftime(url)`.
      url: sqlite:///~/.mq2db/somewhere/example-%Y%m%d.sqlite3
      # Custom initialization.
      # Lines in init will be executed right after each connection is established.
      init:
        - PRAGMA journal_mode=WAL;
        - PRAGMA synchronous=NORMAL;
        - PRAGMA temp_store=MEMORY;
        - PRAGMA busy_timeout=3000;
      # Column spec.
      # If omitted, _datetime_ and _raw_ should be True to store data.
      columns:
        somenumber: INTEGER NOT NULL
        anothernumber: REAL
        sometext: TEXT NOT NULL
      # Primary key configuration.
      # Multiple columns can be specified as a list entries.
      primary_key:
        - somenumber
      # Indices configuration.
      # Multiple indices can be created.
      # If you just need auto index by primary key, just remove this section.
      indices:
        # Index.
        # Multiple columns can be specified as a list entries.
        index_anothernumber:
          - anothernumber
      # Automatically add a column named "_datetime_" which holds the current timestamp.
      # If no primary key is configured, this becomes the primary key.
      _datetime_: True
      # Automatically add a column named "_timestamp_", coarse representation of current time in UNIX timestamp.
      _timestamp_: True
      # Automatically add a column named "_raw_" which holds the raw data in binary blob.
      _raw_: False
      # Prefix for INSERT statement.
      # If you use 'OR IGNORE' on SQLite, duplicate entries will be discarded.
      insert_prefix: "OR IGNORE"
      # Interval for database writing in timedelta spec.
      # Default is 1 second.
      interval:
        seconds: 3
